include: '../common.snakemake'

output_dir = config.get("output_dir")
summary_dir = config.get('summary_dir')


rule all:
    input:
        get_all_inputs

###------------------------The pre_process section---------------------------###
    
rule fastqc_raw_pe:
    input:
        auto_gzip_input(config.get('data_dir') + '/fastq/{sample_id}.fastq')
    output:
        html='{output_dir}/fastqc_raw/{sample_id}_fastqc.html',
        zip='{output_dir}/fastqc_raw/{sample_id}_fastqc.zip'
    params:
        output_prefix='{output_dir}/fastqc_raw/',
        # temp_dir=config['temp_dir']
    threads:
        1
    conda:
        "../envs/quality_control.yaml"
    log:
        '{output_dir}/log/quality_control/fastqc/{sample_id}.log'
    shell:
        ''' fastqc -f fastq -o {params.output_prefix} {input} > {log} 2>&1
        '''


rule multiqc_raw_pe:
    input:
        fastqc=expand('{output_dir}/fastqc_raw/{sample_id}_fastqc.zip',
            output_dir=output_dir, sample_id=sample_ids)
    output:
        multiqc_raw_pe_html='{output_dir}/multiqc_raw/multiqc_report.html',
        multiqc_raw_general_stats='{output_dir}/multiqc_raw/multiqc_data/multiqc_general_stats.txt',
        multiqc_raw_pe_txt='{output_dir}/multiqc_raw/multiqc_data/multiqc_fastqc.txt',
    params:
        fastqc_dir='{output_dir}/fastqc_raw',
        multiqc_out_dir='{output_dir}/multiqc_raw'
    wildcard_constraints:
        mate_index='[12]'
    threads:
        1
    conda:
        "../envs/quality_control.yaml"
    log:
        '{output_dir}/log/quality_control/multiqc.log'
    shell:
        '''multiqc -f -m fastqc -o {params.multiqc_out_dir} {params.fastqc_dir} > {log} 2>&1
        '''




# ## For NEB libraries:
# cutadapt AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC -m 16 --trim-n -q 30 \
# -o >(pigz -c -p {threads} > {trimmed}) {input} > {log} 2>&1

# ## For smart libraries:
# cutadapt AAAAAAAAAAA GGGGG -m 16 --trim-n -q 30 \
# -o >(pigz -c -p {threads} > {trimmed}) {input} > {log} 2>&1
rule cutadapt_se:
    input:
        auto_gzip_input(data_dir + '/fastq/{sample_id}.fastq')
    output:
        trimmed='{output_dir}/cutadapt/{sample_id}.fastq.gz'
    params:
        min_read_length=config['min_read_length'],
        min_base_quality=config['min_base_quality'],
        trim_5p=lambda wildcards: '-u {}'.format(config['trim_5p']) if config['trim_5p'] > 0 else '',
        trim_3p=lambda wildcards: '-u -{}'.format(config['trim_3p']) if config['trim_3p'] > 0 else '',
        adaptor=lambda wildcards: get_cutadapt_adapter_args(wildcards, config['adaptor'], '-a'),
        adaptor_5p=lambda wildcards: get_cutadapt_adapter_args(wildcards, config['adaptor_5p'], '-g'),
        umi_length=config['umi_length']
    log:
        '{output_dir}/log/cutadapt/{sample_id}'
    threads: 2
    run:
        if config['trim_after_adapter']:
            shell('''cutadapt {params.adaptor} {params.adaptor_5p} \
                -m {params.min_read_length} --trim-n -q {params.min_base_quality} {input}  2>&1 \
                | cutadapt {params.trim_5p} {params.trim_3p} \
                -o >(pigz -c -p {threads} > {output.trimmed})  > {log}
                ''')
        else:
            shell('''cutadapt {params.adaptor} {params.adaptor_5p} {params.trim_5p} {params.trim_3p} \
                -m {params.min_read_length} --trim-n -q {params.min_base_quality} \
                -o >(pigz -c -p {threads} > {output.trimmed}) {input} > {log} 2>&1
                ''')

rule afterQC_pe:
    input:
        read1=auto_gzip_input('{output_dir}/cutadapt/{sample_id}.fastq.gz'),
    output:
        read1='{output_dir}/afterQC/{sample_id}.fastq.gz',
    params:
        out_file='{output_dir}/afterQC',
        read1='{output_dir}/afterQC/{sample_id}.good.fq.gz',
    conda:
        "../envs/ctdna.yaml"
    log:
        '{output_dir}/log/afterQC/{sample_id}.log'
    shell:
        '''after.py \
            -1 {input.read1} \
            -g {params.out_file} \
            -b {params.out_file} \
            -r {params.out_file} > {log} 2>&1 ; mv {params.read1} {output.read1} ; mv {params.read2} {output.read2}
        '''

rule fastqc_clean_pe:
    input:
        '{output_dir}/afterQC/{sample_id}.fastq.gz'
    output:
        html='{output_dir}/fastqc_clean/{sample_id}_fastqc.html',
        zip='{output_dir}/fastqc_clean/{sample_id}_fastqc.zip'
    params:
        output_prefix='{output_dir}/fastqc_clean/',
        temp_dir=config.get('temp_dir')
    threads:
        1
    conda:
        "../envs/quality_control.yaml"
    log:
        '{output_dir}/log/quality_control_clean/fastqc/{sample_id}_{mate_index}.log'
    shell:
        ''' fastqc -f fastq -o {params.output_prefix} {input} > {log} 2>&1
        '''

rule multiqc_clean_pe:
    input:
        fastqc=expand('{output_dir}/fastqc_clean/{sample_id}_fastqc.zip',
            output_dir=output_dir, sample_id=sample_ids)
    output:
        multiqc_clean_pe_html='{output_dir}/multiqc_clean/multiqc_report.html',
        multiqc_clean_general_stats='{output_dir}/multiqc_clean/multiqc_data/multiqc_general_stats.txt',
        multiqc_clean_pe_txt='{output_dir}/multiqc_clean/multiqc_data/multiqc_fastqc.txt',
    params:
        fastqc_dir='{output_dir}/fastqc_clean',
        multiqc_out_dir='{output_dir}/multiqc_clean/'
    wildcard_constraints:
        mate_index='[12]'
    threads:
        1
    conda:
        "../envs/quality_control.yaml"
    log:
        '{output_dir}/log/quality_control_clean/multiqc.log'
    shell:
        '''multiqc -f -m fastqc -o {params.multiqc_out_dir} {params.fastqc_dir} > {log} 2>&1
        '''


###------------------------The mapping section---------------------------###


rule map_spikein_se:
    input:
        reads='{output_dir}/unmapped/{sample_id}/clean.fa.gz',
    output:
        unmapped='{output_dir}/unmapped/{sample_id}/spikein.fa.gz',
        bam='{output_dir}/bam/{sample_id}/spikein.bam'
    params:
        index=config.get('genome_dir') + '/index/bowtie2/spikein_small'
    threads:
        config['threads_mapping']
    conda:
        ""
    log:
        '{output_dir}/log/mapping/rRNA/{sample_id}.log'
    shell:
        '''pigz -d -c {input.reads} \
        | bowtie2 -f -p {threads} --norc --sensitive --no-unal \
            --un-gz {output.unmapped} -x {params.index} - -S - \
        | samtools view -b -o {output.bam} > {log} 2>&1
        '''

rule map_univec_se:
    input:
        reads='{output_dir}/unmapped/{sample_id}/spikein.fa.gz',
    output:
        unmapped='{output_dir}/unmapped/{sample_id}/univec.fa.gz',
        bam='{output_dir}/bam/{sample_id}/univec.bam'
    params:
        index=config.get('genome_dir') + '/rsem_index/bowtie2/univec'
    threads:
        config['threads_mapping']
    conda:
        ""
    log:
        '{output_dir}/log/mapping/rRNA/{sample_id}.log'
    shell:
        '''pigz -d -c {input.reads} \
        | bowtie2 -f -p {threads} --norc --sensitive --no-unal \
            --un-gz {output.unmapped} -x {params.index} - -S - \
        | samtools view -b -o {output.bam} > {log} 2>&1
        '''

rule map_rRNA_se:
    input:
        reads='{output_dir}/unmapped/{sample_id}/univec.fa.gz',
    output:
        unmapped='{output_dir}/unmapped/{sample_id}/rRNA.fa.gz',
        bam='{output_dir}/bam/{sample_id}/rRNA.bam'
    params:
        index=config.get('genome_dir') + '/index/bowtie2/rRNA'
    threads:
        config['threads_mapping']
    # resources:
    #     mem_mb=20480
    conda:
        ""
    log:
        '{output_dir}/log/mapping/rRNA/{sample_id}.log'
    shell:
        '''pigz -d -c {input.reads} \
        | bowtie2 -f -p {threads} --norc --sensitive --no-unal \
            --un-gz {output.unmapped} -x {params.index} - -S - \
        | samtools view -b -o {output.bam} > {log} 2>&1
        '''

rule map_lncRNA_se:
    input:
        reads='{output_dir}/unmapped/{sample_id}/rRNA.fa.gz',
    output:
        unmapped='{output_dir}/unmapped/{sample_id}/lncRNA.fa.gz',
        bam='{output_dir}/bam/{sample_id}/lncRNA.bam'
    params:
        index=config.get('genome_dir') + '/rsem_index/bowtie2/lncRNA'
    threads:
        config['threads_mapping']
    conda:
        ""
    log:
        '{output_dir}/log/mapping/rRNA/{sample_id}.log'
    shell:
        '''pigz -d -c {input.reads} \
        | bowtie2 -f -p {threads} --norc --sensitive --no-unal \
            --un-gz {output.unmapped} -x {params.index} - -S - \
        | samtools view -b -o {output.bam} > {log} 2>&1
        '''


rule map_miRNA_se:
    input:
        reads='{output_dir}/unmapped/{sample_id}/lncRNA.fa.gz',
    output:
        unmapped='{output_dir}/unmapped/{sample_id}/miRNA.fa.gz',
        bam='{output_dir}/bam/{sample_id}/miRNA.bam'
    params:
        index=config.get('genome_dir') + '/index/bowtie2/miRNA'
    threads:
        config['threads_mapping']
    conda:
        ""
    log:
        '{output_dir}/log/mapping/rRNA/{sample_id}.log'
    shell:
        '''pigz -d -c {input.reads} \
        | bowtie2 -f -p {threads} --norc --sensitive --no-unal \
            --un-gz {output.unmapped} -x {params.index} - -S - \
        | samtools view -b -o {output.bam} > {log} 2>&1
        '''


rule map_mRNA_se:
    input:
        reads='{output_dir}/unmapped/{sample_id}/miRNA.fa.gz',
    output:
        unmapped='{output_dir}/unmapped/{sample_id}/mRNA.fa.gz',
        bam='{output_dir}/bam/{sample_id}/mRNA.bam'
    params:
        index=config.get('genome_dir') + '/rsem_index/bowtie2/mRNA'
    threads:
        config['threads_mapping']
    conda:
        ""
    log:
        '{output_dir}/log/mapping/rRNA/{sample_id}.log'
    shell:
        '''pigz -d -c {input.reads} \
        | bowtie2 -f -p {threads} --norc --sensitive --no-unal \
            --un-gz {output.unmapped} -x {params.index} - -S - \
        | samtools view -b -o {output.bam} > {log} 2>&1
        '''

rule map_piRNA:
    input:
        reads='{output_dir}/unmapped/{sample_id}/mRNA.fa.gz',
    output:
        unmapped='{output_dir}/unmapped/{sample_id}/piRNA.fa.gz',
        bam='{output_dir}/bam/{sample_id}/piRNA.bam'
    params:
        index=config.get('genome_dir') + '/rsem_index/bowtie2/piRNA'
    threads: 
        config['threads_mapping']
    shell:
        '''pigz -d -c {input.reads} \
        | bowtie2 -f -p {threads} --norc --sensitive --no-unal \
            --un-gz {output.unmapped} -x {params.index} - -S - \
        | samtools view -b -o {output.bam} > {log} 2>&1
        '''

rule map_snoRNA:
    input:
        reads='{output_dir}/unmapped/{sample_id}/piRNA.fa.gz',
    output:
        unmapped='{output_dir}/unmapped/{sample_id}/snoRNA.fa.gz',
        bam='{output_dir}/bam/{sample_id}/snoRNA.bam'
    params:
        index=config.get('genome_dir') + '/rsem_index/bowtie2/snoRNA'
    threads: 
        config['threads_mapping']
    shell:
        '''pigz -d -c {input.reads} \
        | bowtie2 -f -p {threads} --norc --sensitive --no-unal \
            --un-gz {output.unmapped} -x {params.index} - -S - \
        | samtools view -b -o {output.bam} > {log} 2>&1
        '''

rule map_snRNA:
    input:
        reads='{output_dir}/unmapped/{sample_id}/snoRNA.fa.gz',
    output:
        unmapped='{output_dir}/unmapped/{sample_id}/snRNA.fa.gz',
        bam='{output_dir}/bam/{sample_id}/snRNA.bam'
    params:
        index=config.get('genome_dir') + '/rsem_index/bowtie2/snRNA'
    threads: 
        config['threads_mapping']
    shell:
        '''pigz -d -c {input.reads} \
        | bowtie2 -f -p {threads} --norc --sensitive --no-unal \
            --un-gz {output.unmapped} -x {params.index} - -S - \
        | samtools view -b -o {output.bam} > {log} 2>&1
        '''

rule map_srpRNA:
    input:
        reads='{output_dir}/unmapped/{sample_id}/snRNA.fa.gz',
    output:
        unmapped='{output_dir}/unmapped/{sample_id}/srpRNA.fa.gz',
        bam='{output_dir}/bam/{sample_id}/srpRNA.bam'
    params:
        index=config.get('genome_dir') + '/rsem_index/bowtie2/srpRNA'
    threads: 
        config['threads_mapping']
    shell:
        '''pigz -d -c {input.reads} \
        | bowtie2 -f -p {threads} --norc --sensitive --no-unal \
            --un-gz {output.unmapped} -x {params.index} - -S - \
        | samtools view -b -o {output.bam} > {log} 2>&1
        '''

rule map_tRNA:
    input:
        reads='{output_dir}/unmapped/{sample_id}/srpRNA.fa.gz',
    output:
        unmapped='{output_dir}/unmapped/{sample_id}/tRNA.fa.gz',
        bam='{output_dir}/bam/{sample_id}/tRNA.bam'
    params:
        index=config.get('genome_dir') + '/rsem_index/bowtie2/tRNA'
    threads: 
        config['threads_mapping']
    shell:
        '''pigz -d -c {input.reads} \
        | bowtie2 -f -p {threads} --norc --sensitive --no-unal \
            --un-gz {output.unmapped} -x {params.index} - -S - \
        | samtools view -b -o {output.bam} > {log} 2>&1
        '''

rule map_tucpRNA:
    input:
        reads='{output_dir}/unmapped/{sample_id}/tRNA.fa.gz',
    output:
        unmapped='{output_dir}/unmapped/{sample_id}/tucpRNA.fa.gz',
        bam='{output_dir}/bam/{sample_id}/tucpRNA.bam'
    params:
        index=config.get('genome_dir') + '/rsem_index/bowtie2/tucpRNA'
    threads: 
        config['threads_mapping']
    shell:
        '''pigz -d -c {input.reads} \
        | bowtie2 -f -p {threads} --norc --sensitive --no-unal \
            --un-gz {output.unmapped} -x {params.index} - -S - \
        | samtools view -b -o {output.bam} > {log} 2>&1
        '''

rule map_Y_RNA:
    input:
        reads='{output_dir}/unmapped/{sample_id}/tucpRNA.fa.gz',
    output:
        unmapped='{output_dir}/unmapped/{sample_id}/Y_RNA.fa.gz',
        bam='{output_dir}/bam/{sample_id}/Y_RNA.bam'
    params:
        index=config.get('genome_dir') + '/rsem_index/bowtie2/Y_RNA'
    threads: 
        config['threads_mapping']
    shell:
        '''pigz -d -c {input.reads} \
        | bowtie2 -f -p {threads} --norc --sensitive --no-unal \
            --un-gz {output.unmapped} -x {params.index} - -S - \
        | samtools view -b -o {output.bam} > {log} 2>&1
        '''

rule map_circRNA:
    input:
        reads='{output_dir}/unmapped/{sample_id}/Y_RNA.fa.gz',
    output:
        unmapped='{output_dir}/unmapped/{sample_id}/circRNA.fa.gz',
        bam='{output_dir}/bam/{sample_id}/circRNA.bam'
    params:
        index=config.get('genome_dir') + '/index/bowtie2/circRNA'
    threads: 
        config['threads_mapping']
    shell:
        '''pigz -d -c {input.reads} \
        | bowtie2 -f -p {threads} --norc --sensitive --no-unal \
            --un-gz {output.unmapped} -x {params.index} - -S - \
        | samtools view -b -o {output.bam} > {log} 2>&1
        '''

rule map_other:
    input:
        reads='{output_dir}/unmapped/{sample_id}/circRNA.fa.gz',
    output:
        unmapped='{output_dir}/unmapped/{sample_id}/other.fa.gz',
        bam='{output_dir}/bam/{sample_id}/other.bam'
    params:
        index=config.get('genome_dir') + '/genome_index/bowtie2/genome'
    shell:
        '''pigz -d -c {input.reads} \
        | bowtie2 -f -p {threads} --sensitive --no-unal \
            --un-gz {output.unmapped} -x {params.index} - -S - \
        | samtools view -b -o {output.bam} > {log} 2>&1
        '''

###------------------------The expression section---------------------------###

rule count_miRNA:
    input:
        miRNA_bams=expand('{output_dir}/bam/{sample_id}/miRNA.bam',output_dir=output_dir,sample_id=sample_ids)
        GTF=